{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from 'react';\n//const FormManager = <T extends Record<string, any>>(initialValues: T) => {\nconst FormManager = initialValues => {\n  _s();\n  const [inputs, setInputs] = useState(initialValues);\n  //const [errors, setErrors] = useState<Partial<Record<keyof T, string>>>({});\n\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setInputs(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n  const validate = validationRules => {\n    const validationErrors = validationRules(inputs);\n    const isValid = !Object.values(validationErrors).some(error => error.trim() !== \"\");\n    setErrors(validationErrors);\n    return isValid;\n  };\n  const resetForm = () => {\n    setInputs(initialValues);\n    setErrors({});\n  };\n  return {\n    inputs,\n    errors,\n    handleChange,\n    validate,\n    resetForm\n  };\n};\n_s(FormManager, \"g3Zm/qd44sG4b9YKRJ+c7za2HgA=\");\n_c = FormManager;\nexport default FormManager;\nvar _c;\n$RefreshReg$(_c, \"FormManager\");","map":{"version":3,"names":["useState","FormManager","initialValues","_s","inputs","setInputs","handleChange","e","name","value","target","prev","validate","validationRules","validationErrors","isValid","Object","values","some","error","trim","setErrors","resetForm","errors","_c","$RefreshReg$"],"sources":["/Users/anitamavani/workspace/React/my-ts-app/src/pages/FormManager.tsx"],"sourcesContent":["import { useState } from 'react';\nimport { FormState } from './Auth';\ntype ValidationFunction<T> = (values: T) => Record<keyof T, string>;\n\n//const FormManager = <T extends Record<string, any>>(initialValues: T) => {\nconst FormManager = (initialValues: FormState) => {\n  const [inputs, setInputs] = useState<FormState>(initialValues);\n  //const [errors, setErrors] = useState<Partial<Record<keyof T, string>>>({});\n\n  const handleChange = (\n    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\n  ) => {\n    const { name, value } = e.target;\n    setInputs((prev) => ({\n      ...prev,\n      [name]: value,\n    }));\n  };\n\n  const validate = (validationRules: ValidationFunction<T>): boolean => {\n    const validationErrors = validationRules(inputs);\n    const isValid = !Object.values(validationErrors).some((error) => error.trim() !== \"\");\n    setErrors(validationErrors); \n    return isValid;\n};\nconst resetForm = () => {\n    setInputs(initialValues);\n    setErrors({});\n}\n\n\n  return { inputs, errors, handleChange, validate, resetForm };\n};\n\nexport default FormManager;\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAIhC;AACA,MAAMC,WAAW,GAAIC,aAAwB,IAAK;EAAAC,EAAA;EAChD,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGL,QAAQ,CAAYE,aAAa,CAAC;EAC9D;;EAEA,MAAMI,YAAY,GAChBC,CAA4D,IACzD;IACH,MAAM;MAAEC,IAAI;MAAEC;IAAM,CAAC,GAAGF,CAAC,CAACG,MAAM;IAChCL,SAAS,CAAEM,IAAI,KAAM;MACnB,GAAGA,IAAI;MACP,CAACH,IAAI,GAAGC;IACV,CAAC,CAAC,CAAC;EACL,CAAC;EAED,MAAMG,QAAQ,GAAIC,eAAsC,IAAc;IACpE,MAAMC,gBAAgB,GAAGD,eAAe,CAACT,MAAM,CAAC;IAChD,MAAMW,OAAO,GAAG,CAACC,MAAM,CAACC,MAAM,CAACH,gBAAgB,CAAC,CAACI,IAAI,CAAEC,KAAK,IAAKA,KAAK,CAACC,IAAI,CAAC,CAAC,KAAK,EAAE,CAAC;IACrFC,SAAS,CAACP,gBAAgB,CAAC;IAC3B,OAAOC,OAAO;EAClB,CAAC;EACD,MAAMO,SAAS,GAAGA,CAAA,KAAM;IACpBjB,SAAS,CAACH,aAAa,CAAC;IACxBmB,SAAS,CAAC,CAAC,CAAC,CAAC;EACjB,CAAC;EAGC,OAAO;IAAEjB,MAAM;IAAEmB,MAAM;IAAEjB,YAAY;IAAEM,QAAQ;IAAEU;EAAU,CAAC;AAC9D,CAAC;AAACnB,EAAA,CA3BIF,WAAW;AAAAuB,EAAA,GAAXvB,WAAW;AA6BjB,eAAeA,WAAW;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}