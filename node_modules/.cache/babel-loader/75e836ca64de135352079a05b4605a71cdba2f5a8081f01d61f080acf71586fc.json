{"ast":null,"code":"import { fieldValidationRules } from './ValidationRules';\nconst Validation = inputs => {\n  const errors = Object.keys(inputs).reduce((acc, key) => {\n    const value = inputs[key];\n    const rules = fieldValidationRules[key];\n    if (rules.required && !value.trim()) {\n      acc[key] = `${key.charAt(0).toUppercase() + key.slice(1)} is required`;\n    } else if (rules.minLength && value.length < rules.minLength) {\n      acc[key] = `This field must be at least ${rules.minLength} characters long`;\n    } else if (rules.regex && !rules.regex.test(value)) {\n      acc[key] = \"Invalid format\";\n    } else if (rules.customValidation) {\n      const customError = rules.customValidation(value);\n      if (customError) {\n        acc[key] = customError;\n      }\n    }\n    return acc;\n  }, {});\n  return errors;\n};\n_c = Validation;\nexport default Validation;\nvar _c;\n$RefreshReg$(_c, \"Validation\");","map":{"version":3,"names":["fieldValidationRules","Validation","inputs","errors","Object","keys","reduce","acc","key","value","rules","required","trim","charAt","toUppercase","slice","minLength","length","regex","test","customValidation","customError","_c","$RefreshReg$"],"sources":["/Users/anitamavani/workspace/React/my-ts-app/src/pages/Validation.tsx"],"sourcesContent":["import {fieldValidationRules} from './ValidationRules';\n\ntype ValidationFunction<T> = (inputs: T) => Record<keyof T, string>;\n\nconst Validation: ValidationFunction<{ [key: string]: string }> = (inputs) => {\n  \n  const errors = Object.keys(inputs).reduce((acc, key:string) => {\n    const value = inputs[key];\n    const rules = fieldValidationRules[key];\n    if (rules.required && !value.trim()) {\n      acc[key] = `${key.charAt(0).toUppercase()+ key.slice(1)} is required`;\n    } else if (rules.minLength && value.length < rules.minLength) {\n      acc[key] = `This field must be at least ${rules.minLength} characters long`;\n    } else if (rules.regex && !rules.regex.test(value)) {\n      acc[key] = \"Invalid format\";\n    } else if (rules.customValidation) {\n      const customError = rules.customValidation(value);\n      if (customError) {\n        acc[key] = customError;\n      }\n    }\n    return acc;\n  }, {} as Record<string, string>);\n  return errors;\n};\n\nexport default Validation;\n"],"mappings":"AAAA,SAAQA,oBAAoB,QAAO,mBAAmB;AAItD,MAAMC,UAAyD,GAAIC,MAAM,IAAK;EAE5E,MAAMC,MAAM,GAAGC,MAAM,CAACC,IAAI,CAACH,MAAM,CAAC,CAACI,MAAM,CAAC,CAACC,GAAG,EAAEC,GAAU,KAAK;IAC7D,MAAMC,KAAK,GAAGP,MAAM,CAACM,GAAG,CAAC;IACzB,MAAME,KAAK,GAAGV,oBAAoB,CAACQ,GAAG,CAAC;IACvC,IAAIE,KAAK,CAACC,QAAQ,IAAI,CAACF,KAAK,CAACG,IAAI,CAAC,CAAC,EAAE;MACnCL,GAAG,CAACC,GAAG,CAAC,GAAG,GAAGA,GAAG,CAACK,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,GAAEN,GAAG,CAACO,KAAK,CAAC,CAAC,CAAC,cAAc;IACvE,CAAC,MAAM,IAAIL,KAAK,CAACM,SAAS,IAAIP,KAAK,CAACQ,MAAM,GAAGP,KAAK,CAACM,SAAS,EAAE;MAC5DT,GAAG,CAACC,GAAG,CAAC,GAAG,+BAA+BE,KAAK,CAACM,SAAS,kBAAkB;IAC7E,CAAC,MAAM,IAAIN,KAAK,CAACQ,KAAK,IAAI,CAACR,KAAK,CAACQ,KAAK,CAACC,IAAI,CAACV,KAAK,CAAC,EAAE;MAClDF,GAAG,CAACC,GAAG,CAAC,GAAG,gBAAgB;IAC7B,CAAC,MAAM,IAAIE,KAAK,CAACU,gBAAgB,EAAE;MACjC,MAAMC,WAAW,GAAGX,KAAK,CAACU,gBAAgB,CAACX,KAAK,CAAC;MACjD,IAAIY,WAAW,EAAE;QACfd,GAAG,CAACC,GAAG,CAAC,GAAGa,WAAW;MACxB;IACF;IACA,OAAOd,GAAG;EACZ,CAAC,EAAE,CAAC,CAA2B,CAAC;EAChC,OAAOJ,MAAM;AACf,CAAC;AAACmB,EAAA,GApBIrB,UAAyD;AAsB/D,eAAeA,UAAU;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}