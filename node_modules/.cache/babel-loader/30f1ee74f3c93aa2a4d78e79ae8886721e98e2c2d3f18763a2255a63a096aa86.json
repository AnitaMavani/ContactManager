{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from 'react';\nconst FormManager = (initialState, validateFields) => {\n  _s();\n  const [inputs, setInputs] = useState(initialState);\n  const [errors, setErrors] = useState({});\n  const handleChange = e => {\n    setInputs(prevState => ({\n      ...prevState,\n      [e.target.name]: e.target.value\n    }));\n    setErrors(prevErrors => ({\n      ...prevErrors,\n      [e.target.name]: \"\"\n    }));\n  };\n  const validate = () => {\n    const validationErrors = validateFields(inputs);\n    setErrors(validationErrors);\n    return Object.keys(validationErrors).every(key => !validationErrors[key]);\n  };\n  const resetForm = () => setInputs(initialState);\n  return {\n    inputs,\n    errors,\n    handleChange,\n    validate,\n    resetForm\n  };\n};\n_s(FormManager, \"Kl2lBDcFRpco48RaV3EfsoeCqdQ=\");\n_c = FormManager;\nexport default FormManager;\nvar _c;\n$RefreshReg$(_c, \"FormManager\");","map":{"version":3,"names":["useState","FormManager","initialState","validateFields","_s","inputs","setInputs","errors","setErrors","handleChange","e","prevState","target","name","value","prevErrors","validate","validationErrors","Object","keys","every","key","resetForm","_c","$RefreshReg$"],"sources":["/Users/anitamavani/workspace/React/my-ts-app/src/pages/FormManager.tsx"],"sourcesContent":["import {useState} from 'react';\n\nconst FormManager = (initialState, validateFields) => {\n    const [inputs, setInputs] = useState(initialState);\n    const [errors, setErrors] = useState<Record<string, string>>({});\n\n    const handleChange = (e:any) => {\n          setInputs((prevState) => ({ \n              ...prevState, \n              [e.target.name]: e.target.value \n          }));\n          setErrors((prevErrors) => ({\n              ...prevErrors,\n              [e.target.name]: \"\"\n            }));\n    };\n    interface FormState {\n        name: string;\n        email: string;\n      }\n    type ValidateFunction = (fields: FormState) => Record<string, string>; \n    const validate = () => {\n        const validationErrors = validateFields(inputs);\n        setErrors(validationErrors);\n        return Object.keys(validationErrors).every((key) => !validationErrors[key]);\n    };\n    const resetForm = () => setInputs(initialState);\n    return { inputs, errors, handleChange, validate, resetForm };\n}\nexport default FormManager;"],"mappings":";AAAA,SAAQA,QAAQ,QAAO,OAAO;AAE9B,MAAMC,WAAW,GAAGA,CAACC,YAAY,EAAEC,cAAc,KAAK;EAAAC,EAAA;EAClD,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGN,QAAQ,CAACE,YAAY,CAAC;EAClD,MAAM,CAACK,MAAM,EAAEC,SAAS,CAAC,GAAGR,QAAQ,CAAyB,CAAC,CAAC,CAAC;EAEhE,MAAMS,YAAY,GAAIC,CAAK,IAAK;IAC1BJ,SAAS,CAAEK,SAAS,KAAM;MACtB,GAAGA,SAAS;MACZ,CAACD,CAAC,CAACE,MAAM,CAACC,IAAI,GAAGH,CAAC,CAACE,MAAM,CAACE;IAC9B,CAAC,CAAC,CAAC;IACHN,SAAS,CAAEO,UAAU,KAAM;MACvB,GAAGA,UAAU;MACb,CAACL,CAAC,CAACE,MAAM,CAACC,IAAI,GAAG;IACnB,CAAC,CAAC,CAAC;EACX,CAAC;EAMD,MAAMG,QAAQ,GAAGA,CAAA,KAAM;IACnB,MAAMC,gBAAgB,GAAGd,cAAc,CAACE,MAAM,CAAC;IAC/CG,SAAS,CAACS,gBAAgB,CAAC;IAC3B,OAAOC,MAAM,CAACC,IAAI,CAACF,gBAAgB,CAAC,CAACG,KAAK,CAAEC,GAAG,IAAK,CAACJ,gBAAgB,CAACI,GAAG,CAAC,CAAC;EAC/E,CAAC;EACD,MAAMC,SAAS,GAAGA,CAAA,KAAMhB,SAAS,CAACJ,YAAY,CAAC;EAC/C,OAAO;IAAEG,MAAM;IAAEE,MAAM;IAAEE,YAAY;IAAEO,QAAQ;IAAEM;EAAU,CAAC;AAChE,CAAC;AAAAlB,EAAA,CA1BKH,WAAW;AAAAsB,EAAA,GAAXtB,WAAW;AA2BjB,eAAeA,WAAW;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}