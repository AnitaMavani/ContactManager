{"ast":null,"code":"const fieldValidationRules = {\n  name: {\n    required: true\n  },\n  email: {\n    required: true,\n    regex: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\n  },\n  password: {\n    required: true,\n    minLength: 6\n  },\n  message: {\n    required: true,\n    minLength: 10\n  }\n};\n\n// const Validation: ValidationFunction<{ [key: string]: string }> = (inputs) => {\n//   const errors = Object.keys(inputs).reduce((acc, key) => {\n//     const value = inputs[key];\n//     const rules = fieldValidationRules[key];\n//     if (rules.required && !value.trim()) {\n//       acc[key] = \"This field is required\";\n//     } else if (rules.minLength && value.length < rules.minLength) {\n//       acc[key] = `This field must be at least ${rules.minLength} characters long`;\n//     } else if (rules.regex && !rules.regex.test(value)) {\n//       acc[key] = \"Invalid format\";\n//     } else if (rules.customValidation) {\n//       const customError = rules.customValidation(value);\n//       if (customError) {\n//         acc[key] = customError;\n//       }\n//     }\n//     return acc;\n//   }, {} as Record<string, string>);\n//   return errors;\n// };\n\nexport default Validation;","map":{"version":3,"names":["fieldValidationRules","name","required","email","regex","password","minLength","message","Validation"],"sources":["/Users/anitamavani/workspace/React/my-ts-app/src/pages/Validation.tsx"],"sourcesContent":["type ValidationFunction<T> = (inputs: T) => Record<keyof T, string>;\n\ninterface ValidationRule {\n  required?: boolean;\n  minLength?: number;\n  regex?: RegExp;\n  customValidation?: (value: string) => string | undefined;\n}\n\nconst fieldValidationRules: Record<string, ValidationRule> = {\n  name: { required: true },\n  email: { required: true, regex: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/ },\n  password: { required: true, minLength: 6 },\n  message: { required: true, minLength: 10 },\n};\n\n// const Validation: ValidationFunction<{ [key: string]: string }> = (inputs) => {\n//   const errors = Object.keys(inputs).reduce((acc, key) => {\n//     const value = inputs[key];\n//     const rules = fieldValidationRules[key];\n//     if (rules.required && !value.trim()) {\n//       acc[key] = \"This field is required\";\n//     } else if (rules.minLength && value.length < rules.minLength) {\n//       acc[key] = `This field must be at least ${rules.minLength} characters long`;\n//     } else if (rules.regex && !rules.regex.test(value)) {\n//       acc[key] = \"Invalid format\";\n//     } else if (rules.customValidation) {\n//       const customError = rules.customValidation(value);\n//       if (customError) {\n//         acc[key] = customError;\n//       }\n//     }\n//     return acc;\n//   }, {} as Record<string, string>);\n//   return errors;\n// };\n\nexport default Validation;\n"],"mappings":"AASA,MAAMA,oBAAoD,GAAG;EAC3DC,IAAI,EAAE;IAAEC,QAAQ,EAAE;EAAK,CAAC;EACxBC,KAAK,EAAE;IAAED,QAAQ,EAAE,IAAI;IAAEE,KAAK,EAAE;EAA6B,CAAC;EAC9DC,QAAQ,EAAE;IAAEH,QAAQ,EAAE,IAAI;IAAEI,SAAS,EAAE;EAAE,CAAC;EAC1CC,OAAO,EAAE;IAAEL,QAAQ,EAAE,IAAI;IAAEI,SAAS,EAAE;EAAG;AAC3C,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAeE,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}