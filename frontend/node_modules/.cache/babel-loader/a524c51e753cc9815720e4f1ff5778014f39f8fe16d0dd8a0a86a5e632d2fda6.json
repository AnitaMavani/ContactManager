{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from \"react\";\nconst useFormManager = initialState => {\n  _s();\n  const [inputs, setInputs] = useState(initialState);\n  const [errors, setErrors] = useState({});\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setInputs(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n  const validate = validationRules => {\n    let valid = true;\n    let newErrors = {};\n    for (const key in validationRules) {\n      const value = inputs[key];\n      const rules = validationRules[key];\n      if (rules.required && !value) {\n        valid = false;\n        newErrors[key] = \"This field is required\";\n      } else if (rules.minLength && value.length < rules.minLength) {\n        valid = false;\n        newErrors[key] = `Minimum length is ${rules.minLength}`;\n      } else if (rules.regex && !rules.regex.test(value)) {\n        valid = false;\n        newErrors[key] = \"Invalid format\";\n      } else if (rules.customValidation) {\n        const customError = rules.customValidation(value, inputs);\n        if (customError) {\n          valid = false;\n          newErrors[key] = customError;\n        }\n      }\n    }\n    setErrors(newErrors);\n    return valid;\n  };\n  const resetForm = () => {\n    setInputs(initialState);\n    setErrors({});\n  };\n  return {\n    inputs,\n    errors,\n    handleChange,\n    validate,\n    resetForm,\n    setInputs // Ensure setInputs is returned here\n  };\n};\n_s(useFormManager, \"Kl2lBDcFRpco48RaV3EfsoeCqdQ=\");\nexport default useFormManager;","map":{"version":3,"names":["useState","useFormManager","initialState","_s","inputs","setInputs","errors","setErrors","handleChange","e","name","value","target","prev","validate","validationRules","valid","newErrors","key","rules","required","minLength","length","regex","test","customValidation","customError","resetForm"],"sources":["/Users/anitamavani/workspace/React/my-ts-app/src/pages/FormManager.tsx"],"sourcesContent":["import { useState } from \"react\";\n\nconst useFormManager = (initialState: Record<string, any>) => {\n  const [inputs, setInputs] = useState(initialState);\n  const [errors, setErrors] = useState<Record<string, string>>({});\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target;\n    setInputs((prev) => ({ ...prev, [name]: value }));\n  };\n\n  const validate = (validationRules: Record<string, any>) => {\n    let valid = true;\n    let newErrors: Record<string, string> = {};\n\n    for (const key in validationRules) {\n      const value = inputs[key];\n      const rules = validationRules[key];\n\n      if (rules.required && !value) {\n        valid = false;\n        newErrors[key] = \"This field is required\";\n      } else if (rules.minLength && value.length < rules.minLength) {\n        valid = false;\n        newErrors[key] = `Minimum length is ${rules.minLength}`;\n      } else if (rules.regex && !rules.regex.test(value)) {\n        valid = false;\n        newErrors[key] = \"Invalid format\";\n      } else if (rules.customValidation) {\n        const customError = rules.customValidation(value, inputs);\n        if (customError) {\n          valid = false;\n          newErrors[key] = customError;\n        }\n      }\n    }\n\n    setErrors(newErrors);\n    return valid;\n  };\n\n  const resetForm = () => {\n    setInputs(initialState);\n    setErrors({});\n  };\n\n  return {\n    inputs,\n    errors,\n    handleChange,\n    validate,\n    resetForm,\n    setInputs, // Ensure setInputs is returned here\n  };\n};\n\nexport default useFormManager;"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAEhC,MAAMC,cAAc,GAAIC,YAAiC,IAAK;EAAAC,EAAA;EAC5D,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGL,QAAQ,CAACE,YAAY,CAAC;EAClD,MAAM,CAACI,MAAM,EAAEC,SAAS,CAAC,GAAGP,QAAQ,CAAyB,CAAC,CAAC,CAAC;EAEhE,MAAMQ,YAAY,GAAIC,CAAsC,IAAK;IAC/D,MAAM;MAAEC,IAAI;MAAEC;IAAM,CAAC,GAAGF,CAAC,CAACG,MAAM;IAChCP,SAAS,CAAEQ,IAAI,KAAM;MAAE,GAAGA,IAAI;MAAE,CAACH,IAAI,GAAGC;IAAM,CAAC,CAAC,CAAC;EACnD,CAAC;EAED,MAAMG,QAAQ,GAAIC,eAAoC,IAAK;IACzD,IAAIC,KAAK,GAAG,IAAI;IAChB,IAAIC,SAAiC,GAAG,CAAC,CAAC;IAE1C,KAAK,MAAMC,GAAG,IAAIH,eAAe,EAAE;MACjC,MAAMJ,KAAK,GAAGP,MAAM,CAACc,GAAG,CAAC;MACzB,MAAMC,KAAK,GAAGJ,eAAe,CAACG,GAAG,CAAC;MAElC,IAAIC,KAAK,CAACC,QAAQ,IAAI,CAACT,KAAK,EAAE;QAC5BK,KAAK,GAAG,KAAK;QACbC,SAAS,CAACC,GAAG,CAAC,GAAG,wBAAwB;MAC3C,CAAC,MAAM,IAAIC,KAAK,CAACE,SAAS,IAAIV,KAAK,CAACW,MAAM,GAAGH,KAAK,CAACE,SAAS,EAAE;QAC5DL,KAAK,GAAG,KAAK;QACbC,SAAS,CAACC,GAAG,CAAC,GAAG,qBAAqBC,KAAK,CAACE,SAAS,EAAE;MACzD,CAAC,MAAM,IAAIF,KAAK,CAACI,KAAK,IAAI,CAACJ,KAAK,CAACI,KAAK,CAACC,IAAI,CAACb,KAAK,CAAC,EAAE;QAClDK,KAAK,GAAG,KAAK;QACbC,SAAS,CAACC,GAAG,CAAC,GAAG,gBAAgB;MACnC,CAAC,MAAM,IAAIC,KAAK,CAACM,gBAAgB,EAAE;QACjC,MAAMC,WAAW,GAAGP,KAAK,CAACM,gBAAgB,CAACd,KAAK,EAAEP,MAAM,CAAC;QACzD,IAAIsB,WAAW,EAAE;UACfV,KAAK,GAAG,KAAK;UACbC,SAAS,CAACC,GAAG,CAAC,GAAGQ,WAAW;QAC9B;MACF;IACF;IAEAnB,SAAS,CAACU,SAAS,CAAC;IACpB,OAAOD,KAAK;EACd,CAAC;EAED,MAAMW,SAAS,GAAGA,CAAA,KAAM;IACtBtB,SAAS,CAACH,YAAY,CAAC;IACvBK,SAAS,CAAC,CAAC,CAAC,CAAC;EACf,CAAC;EAED,OAAO;IACLH,MAAM;IACNE,MAAM;IACNE,YAAY;IACZM,QAAQ;IACRa,SAAS;IACTtB,SAAS,CAAE;EACb,CAAC;AACH,CAAC;AAACF,EAAA,CApDIF,cAAc;AAsDpB,eAAeA,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}