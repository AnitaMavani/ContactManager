{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from 'react';\nconst FormManager = initialValues => {\n  _s();\n  const [inputs, setInputs] = useState(initialValues);\n  const [errors, setErrors] = useState({});\n\n  //Reset inputs when initialValues changes\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setInputs(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n  const validate = validationRules => {\n    const validationErrors = validationRules(inputs);\n    const isValid = !Object.values(validationErrors).some(error => error.trim() !== \"\");\n    setErrors(validationErrors);\n    return isValid;\n  };\n  const resetForm = newInitialValues => {\n    setInputs(newInitialValues);\n    setErrors({});\n  };\n  return {\n    inputs,\n    errors,\n    handleChange,\n    validate,\n    resetForm,\n    setInputs\n  };\n};\n_s(FormManager, \"PmaWV1MGj4+9wZSRUC2L/QlP8nA=\");\n_c = FormManager;\nexport default FormManager;\nvar _c;\n$RefreshReg$(_c, \"FormManager\");","map":{"version":3,"names":["useState","FormManager","initialValues","_s","inputs","setInputs","errors","setErrors","handleChange","e","name","value","target","prev","validate","validationRules","validationErrors","isValid","Object","values","some","error","trim","resetForm","newInitialValues","_c","$RefreshReg$"],"sources":["/Users/anitamavani/workspace/React/my-ts-app/src/pages/FormManager.tsx"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { ValidationRule } from 'react-hook-form';\ntype ValidationFunction<T> = (values: T) => Record<keyof T, string>;\n\nconst FormManager = (initialValues: Record<string, any> ) => {\n  const [inputs, setInputs] = useState(initialValues);\n  const [errors, setErrors] = useState<Record<string, string>>({});\n\n  //Reset inputs when initialValues changes\n  const handleChange = (\n    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\n  ) => {\n    const { name, value } = e.target;\n    setInputs((prev) => ({\n      ...prev,\n      [name]: value,\n    }));\n  };\n\n  const validate = (validationRules: Record<string, any>) => {\n    const validationErrors = validationRules(inputs);\n    const isValid = !Object.values(validationErrors).some((error) => error.trim() !== \"\");\n    setErrors(validationErrors); \n    return isValid;\n};\nconst resetForm = (newInitialValues: T) => {\n    setInputs(newInitialValues);\n    setErrors({});\n  };\n\n\n  return { inputs, errors, handleChange, validate, resetForm, setInputs };\n};\n\nexport default FormManager;\n"],"mappings":";AAAA,SAASA,QAAQ,QAAmB,OAAO;AAI3C,MAAMC,WAAW,GAAIC,aAAkC,IAAM;EAAAC,EAAA;EAC3D,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGL,QAAQ,CAACE,aAAa,CAAC;EACnD,MAAM,CAACI,MAAM,EAAEC,SAAS,CAAC,GAAGP,QAAQ,CAAyB,CAAC,CAAC,CAAC;;EAEhE;EACA,MAAMQ,YAAY,GAChBC,CAA4D,IACzD;IACH,MAAM;MAAEC,IAAI;MAAEC;IAAM,CAAC,GAAGF,CAAC,CAACG,MAAM;IAChCP,SAAS,CAAEQ,IAAI,KAAM;MACnB,GAAGA,IAAI;MACP,CAACH,IAAI,GAAGC;IACV,CAAC,CAAC,CAAC;EACL,CAAC;EAED,MAAMG,QAAQ,GAAIC,eAAoC,IAAK;IACzD,MAAMC,gBAAgB,GAAGD,eAAe,CAACX,MAAM,CAAC;IAChD,MAAMa,OAAO,GAAG,CAACC,MAAM,CAACC,MAAM,CAACH,gBAAgB,CAAC,CAACI,IAAI,CAAEC,KAAK,IAAKA,KAAK,CAACC,IAAI,CAAC,CAAC,KAAK,EAAE,CAAC;IACrFf,SAAS,CAACS,gBAAgB,CAAC;IAC3B,OAAOC,OAAO;EAClB,CAAC;EACD,MAAMM,SAAS,GAAIC,gBAAmB,IAAK;IACvCnB,SAAS,CAACmB,gBAAgB,CAAC;IAC3BjB,SAAS,CAAC,CAAC,CAAC,CAAC;EACf,CAAC;EAGD,OAAO;IAAEH,MAAM;IAAEE,MAAM;IAAEE,YAAY;IAAEM,QAAQ;IAAES,SAAS;IAAElB;EAAU,CAAC;AACzE,CAAC;AAACF,EAAA,CA5BIF,WAAW;AAAAwB,EAAA,GAAXxB,WAAW;AA8BjB,eAAeA,WAAW;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}