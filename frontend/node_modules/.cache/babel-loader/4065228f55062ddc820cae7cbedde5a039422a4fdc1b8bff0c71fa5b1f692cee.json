{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from 'react';\n// interface FormState {\n//     name: string;\n//     email: string;\n//     message:string;\n//   }\n\nconst FormManager = initialValues => {\n  _s();\n  const [inputs, setInputs] = useState(initialValues);\n  const [errors, setErrors] = useState({});\n  const handleChange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    setInputs(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n  const validate = () => {\n    const validationErrors = validateFields(inputs);\n    setErrors(validationErrors);\n    return Object.keys(validationErrors).length === 0;\n  };\n  const resetForm = () => setInputs(initialState);\n  return {\n    inputs,\n    errors,\n    handleChange,\n    validate,\n    resetForm\n  };\n};\n_s(FormManager, \"PmaWV1MGj4+9wZSRUC2L/QlP8nA=\");\n_c = FormManager;\nexport default FormManager;\nvar _c;\n$RefreshReg$(_c, \"FormManager\");","map":{"version":3,"names":["useState","FormManager","initialValues","_s","inputs","setInputs","errors","setErrors","handleChange","event","name","value","target","prev","validate","validationErrors","validateFields","Object","keys","length","resetForm","initialState","_c","$RefreshReg$"],"sources":["/Users/anitamavani/workspace/React/my-ts-app/src/pages/FormManager.tsx"],"sourcesContent":["import {useState} from 'react';\n// interface FormState {\n//     name: string;\n//     email: string;\n//     message:string;\n//   }\ntype ValidationFunction<T> = (values: T) => Record<keyof T, string>\n\nconst FormManager = <T extends Record<string, any>>(\n    initialValues: T\n    ) => {\n        const [inputs, setInputs] = useState<T>(initialValues);\n  const [errors, setErrors] = useState<Partial<Record<keyof T, string>>>({});\n\n  const handleChange = (\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\n  ) => {\n    const { name, value } = event.target;\n    setInputs((prev) => ({\n      ...prev,\n      [name]: value,\n    }));\n  };\n    const validate = () => {\n        const validationErrors = validateFields(inputs);\n        setErrors(validationErrors);\n        return Object.keys(validationErrors).length === 0;\n      };\n    const resetForm = () => setInputs(initialState);\n    return { inputs, errors, handleChange, validate, resetForm };\n}\nexport default FormManager;"],"mappings":";AAAA,SAAQA,QAAQ,QAAO,OAAO;AAC9B;AACA;AACA;AACA;AACA;;AAGA,MAAMC,WAAW,GACbC,aAAgB,IACX;EAAAC,EAAA;EACD,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGL,QAAQ,CAAIE,aAAa,CAAC;EAC5D,MAAM,CAACI,MAAM,EAAEC,SAAS,CAAC,GAAGP,QAAQ,CAAmC,CAAC,CAAC,CAAC;EAE1E,MAAMQ,YAAY,GAChBC,KAAgE,IAC7D;IACH,MAAM;MAAEC,IAAI;MAAEC;IAAM,CAAC,GAAGF,KAAK,CAACG,MAAM;IACpCP,SAAS,CAAEQ,IAAI,KAAM;MACnB,GAAGA,IAAI;MACP,CAACH,IAAI,GAAGC;IACV,CAAC,CAAC,CAAC;EACL,CAAC;EACC,MAAMG,QAAQ,GAAGA,CAAA,KAAM;IACnB,MAAMC,gBAAgB,GAAGC,cAAc,CAACZ,MAAM,CAAC;IAC/CG,SAAS,CAACQ,gBAAgB,CAAC;IAC3B,OAAOE,MAAM,CAACC,IAAI,CAACH,gBAAgB,CAAC,CAACI,MAAM,KAAK,CAAC;EACnD,CAAC;EACH,MAAMC,SAAS,GAAGA,CAAA,KAAMf,SAAS,CAACgB,YAAY,CAAC;EAC/C,OAAO;IAAEjB,MAAM;IAAEE,MAAM;IAAEE,YAAY;IAAEM,QAAQ;IAAEM;EAAU,CAAC;AAChE,CAAC;AAAAjB,EAAA,CAtBKF,WAAW;AAAAqB,EAAA,GAAXrB,WAAW;AAuBjB,eAAeA,WAAW;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}