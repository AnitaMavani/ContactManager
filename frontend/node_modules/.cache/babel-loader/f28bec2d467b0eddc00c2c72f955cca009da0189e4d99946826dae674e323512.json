{"ast":null,"code":"import { fieldValidationRules } from './ValidationRules';\nconst Validation = inputs => {\n  const errors = Object.keys(inputs).reduce((acc, key) => {\n    const value = inputs[key];\n    const rules = fieldValidationRules[key];\n    if (rules.required && !value.trim()) {\n      console.log(value);\n      acc[key] = `${value} is required`;\n    } else if (rules.minLength && value.length < rules.minLength) {\n      acc[key] = `This field must be at least ${rules.minLength} characters long`;\n    } else if (rules.regex && !rules.regex.test(value)) {\n      acc[key] = \"Invalid format\";\n    } else if (rules.customValidation) {\n      const customError = rules.customValidation(value);\n      if (customError) {\n        acc[key] = customError;\n      }\n    }\n    return acc;\n  }, {});\n  return errors;\n};\n_c = Validation;\nexport default Validation;\nvar _c;\n$RefreshReg$(_c, \"Validation\");","map":{"version":3,"names":["fieldValidationRules","Validation","inputs","errors","Object","keys","reduce","acc","key","value","rules","required","trim","console","log","minLength","length","regex","test","customValidation","customError","_c","$RefreshReg$"],"sources":["/Users/anitamavani/workspace/React/my-ts-app/src/pages/Validation.tsx"],"sourcesContent":["import {fieldValidationRules} from './ValidationRules';\n\ntype ValidationFunction<T> = (inputs: T) => Record<keyof T, string>;\n\nconst Validation: ValidationFunction<{ [key: string]: string }> = (inputs) => {\n  \n  const errors = Object.keys(inputs).reduce((acc, key) => {\n    const value = inputs[key];\n    const rules = fieldValidationRules[key];\n    if (rules.required && !value.trim()) {\n      console.log(value)\n      acc[key] = `${value} is required`;\n    } else if (rules.minLength && value.length < rules.minLength) {\n      acc[key] = `This field must be at least ${rules.minLength} characters long`;\n    } else if (rules.regex && !rules.regex.test(value)) {\n      acc[key] = \"Invalid format\";\n    } else if (rules.customValidation) {\n      const customError = rules.customValidation(value);\n      if (customError) {\n        acc[key] = customError;\n      }\n    }\n    return acc;\n  }, {} as Record<string, string>);\n  return errors;\n};\n\nexport default Validation;\n"],"mappings":"AAAA,SAAQA,oBAAoB,QAAO,mBAAmB;AAItD,MAAMC,UAAyD,GAAIC,MAAM,IAAK;EAE5E,MAAMC,MAAM,GAAGC,MAAM,CAACC,IAAI,CAACH,MAAM,CAAC,CAACI,MAAM,CAAC,CAACC,GAAG,EAAEC,GAAG,KAAK;IACtD,MAAMC,KAAK,GAAGP,MAAM,CAACM,GAAG,CAAC;IACzB,MAAME,KAAK,GAAGV,oBAAoB,CAACQ,GAAG,CAAC;IACvC,IAAIE,KAAK,CAACC,QAAQ,IAAI,CAACF,KAAK,CAACG,IAAI,CAAC,CAAC,EAAE;MACnCC,OAAO,CAACC,GAAG,CAACL,KAAK,CAAC;MAClBF,GAAG,CAACC,GAAG,CAAC,GAAG,GAAGC,KAAK,cAAc;IACnC,CAAC,MAAM,IAAIC,KAAK,CAACK,SAAS,IAAIN,KAAK,CAACO,MAAM,GAAGN,KAAK,CAACK,SAAS,EAAE;MAC5DR,GAAG,CAACC,GAAG,CAAC,GAAG,+BAA+BE,KAAK,CAACK,SAAS,kBAAkB;IAC7E,CAAC,MAAM,IAAIL,KAAK,CAACO,KAAK,IAAI,CAACP,KAAK,CAACO,KAAK,CAACC,IAAI,CAACT,KAAK,CAAC,EAAE;MAClDF,GAAG,CAACC,GAAG,CAAC,GAAG,gBAAgB;IAC7B,CAAC,MAAM,IAAIE,KAAK,CAACS,gBAAgB,EAAE;MACjC,MAAMC,WAAW,GAAGV,KAAK,CAACS,gBAAgB,CAACV,KAAK,CAAC;MACjD,IAAIW,WAAW,EAAE;QACfb,GAAG,CAACC,GAAG,CAAC,GAAGY,WAAW;MACxB;IACF;IACA,OAAOb,GAAG;EACZ,CAAC,EAAE,CAAC,CAA2B,CAAC;EAChC,OAAOJ,MAAM;AACf,CAAC;AAACkB,EAAA,GArBIpB,UAAyD;AAuB/D,eAAeA,UAAU;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}