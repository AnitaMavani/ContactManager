{"ast":null,"code":"// interface ValidationRule {\n//   required?: boolean;\n//   minLength?: number;\n//   regex?: RegExp;\n//   customValidation?: (value: string) => string | undefined;\n// }\n\n// const fieldValidationRules: Record<string, ValidationRule> = {\n//   name: { required: true },\n//   email: { required: true, regex: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/ },\n//   password: { required: true, minLength: 6 },\n//   message: { required: true, minLength: 10 },\n// };\n\nconst Validation = inputs => {};\n//   const errors = Object.keys(inputs).reduce((acc, key) => {\n//     const value = inputs[key];\n//     const rules = fieldValidationRules[key];\n//     if (rules.required && !value.trim()) {\n//       acc[key] = \"This field is required\";\n//     } else if (rules.minLength && value.length < rules.minLength) {\n//       acc[key] = `This field must be at least ${rules.minLength} characters long`;\n//     } else if (rules.regex && !rules.regex.test(value)) {\n//       acc[key] = \"Invalid format\";\n//     } else if (rules.customValidation) {\n//       const customError = rules.customValidation(value);\n//       if (customError) {\n//         acc[key] = customError;\n//       }\n//     }\n//     return acc;\n//   }, {} as Record<string, string>);\n//   return errors;\n// };\n_c = Validation;\nexport default Validation;\nvar _c;\n$RefreshReg$(_c, \"Validation\");","map":{"version":3,"names":["Validation","inputs","_c","$RefreshReg$"],"sources":["/Users/anitamavani/workspace/React/my-ts-app/src/pages/Validation.tsx"],"sourcesContent":["type ValidationFunction<T> = (inputs: T) => Record<keyof T, string>;\n\n// interface ValidationRule {\n//   required?: boolean;\n//   minLength?: number;\n//   regex?: RegExp;\n//   customValidation?: (value: string) => string | undefined;\n// }\n\n// const fieldValidationRules: Record<string, ValidationRule> = {\n//   name: { required: true },\n//   email: { required: true, regex: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/ },\n//   password: { required: true, minLength: 6 },\n//   message: { required: true, minLength: 10 },\n// };\n\nconst Validation: ValidationFunction<{ [key: string]: string }> = (inputs) => {\n  \n}\n//   const errors = Object.keys(inputs).reduce((acc, key) => {\n//     const value = inputs[key];\n//     const rules = fieldValidationRules[key];\n//     if (rules.required && !value.trim()) {\n//       acc[key] = \"This field is required\";\n//     } else if (rules.minLength && value.length < rules.minLength) {\n//       acc[key] = `This field must be at least ${rules.minLength} characters long`;\n//     } else if (rules.regex && !rules.regex.test(value)) {\n//       acc[key] = \"Invalid format\";\n//     } else if (rules.customValidation) {\n//       const customError = rules.customValidation(value);\n//       if (customError) {\n//         acc[key] = customError;\n//       }\n//     }\n//     return acc;\n//   }, {} as Record<string, string>);\n//   return errors;\n// };\n\nexport default Validation;\n"],"mappings":"AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMA,UAAyD,GAAIC,MAAM,IAAK,CAE9E,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAAC,EAAA,GArBMF,UAAyD;AAuB/D,eAAeA,UAAU;AAAC,IAAAE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}