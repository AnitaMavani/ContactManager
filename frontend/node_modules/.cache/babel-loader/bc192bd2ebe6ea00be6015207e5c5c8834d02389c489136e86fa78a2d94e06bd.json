{"ast":null,"code":"var _jsxFileName = \"/Users/anitamavani/workspace/React/my-ts-app/frontend/src/pages/AuthContext.tsx\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext({\n  isLoggedIn: false,\n  userName: '',\n  login: () => {},\n  logout: () => {}\n});\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [userName, setUserName] = useState('');\n  const login = name => {\n    setIsLoggedIn(true);\n    setUserName(name);\n  };\n  const logout = () => {\n    setIsLoggedIn(false);\n    setUserName('');\n    localStorage.removeItem('token'); // Clear token on logout\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isLoggedIn,\n      userName,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"lt2lfda+kVyQWLFxy+ST0A9W6wY=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","jsxDEV","_jsxDEV","AuthContext","isLoggedIn","userName","login","logout","AuthProvider","children","_s","setIsLoggedIn","setUserName","name","localStorage","removeItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/anitamavani/workspace/React/my-ts-app/frontend/src/pages/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useState } from 'react';\n\ntype AuthContextType = {\n  isLoggedIn: boolean;\n  userName: string;\n  login: (name: string) => void;\n  logout: () => void;\n};\n\nexport const AuthContext = createContext<AuthContextType>({\n  isLoggedIn: false,\n  userName: '',\n  login: () => {},\n  logout: () => {},\n});\n\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [isLoggedIn, setIsLoggedIn] = useState<boolean>(false);\n  const [userName, setUserName] = useState<string>('');\n\n  const login = (name: string) => {\n    setIsLoggedIn(true);\n    setUserName(name);\n  };\n\n  const logout = () => {\n    setIsLoggedIn(false);\n    setUserName('');\n    localStorage.removeItem('token'); // Clear token on logout\n  };\n\n  return (\n    <AuthContext.Provider value={{ isLoggedIn, userName, login, logout }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AASvD,OAAO,MAAMC,WAAW,gBAAGJ,aAAa,CAAkB;EACxDK,UAAU,EAAE,KAAK;EACjBC,QAAQ,EAAE,EAAE;EACZC,KAAK,EAAEA,CAAA,KAAM,CAAC,CAAC;EACfC,MAAM,EAAEA,CAAA,KAAM,CAAC;AACjB,CAAC,CAAC;AAEF,OAAO,MAAMC,YAAqD,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACrF,MAAM,CAACN,UAAU,EAAEO,aAAa,CAAC,GAAGX,QAAQ,CAAU,KAAK,CAAC;EAC5D,MAAM,CAACK,QAAQ,EAAEO,WAAW,CAAC,GAAGZ,QAAQ,CAAS,EAAE,CAAC;EAEpD,MAAMM,KAAK,GAAIO,IAAY,IAAK;IAC9BF,aAAa,CAAC,IAAI,CAAC;IACnBC,WAAW,CAACC,IAAI,CAAC;EACnB,CAAC;EAED,MAAMN,MAAM,GAAGA,CAAA,KAAM;IACnBI,aAAa,CAAC,KAAK,CAAC;IACpBC,WAAW,CAAC,EAAE,CAAC;IACfE,YAAY,CAACC,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC;EACpC,CAAC;EAED,oBACEb,OAAA,CAACC,WAAW,CAACa,QAAQ;IAACC,KAAK,EAAE;MAAEb,UAAU;MAAEC,QAAQ;MAAEC,KAAK;MAAEC;IAAO,CAAE;IAAAE,QAAA,EAClEA;EAAQ;IAAAS,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACX,EAAA,CApBWF,YAAqD;AAAAc,EAAA,GAArDd,YAAqD;AAAA,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}