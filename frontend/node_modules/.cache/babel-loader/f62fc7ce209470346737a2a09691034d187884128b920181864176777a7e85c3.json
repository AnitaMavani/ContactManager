{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from 'react';\nconst FormManager = initialValues => {\n  _s();\n  const [inputs, setInputs] = useState(initialValues);\n  const [errors, setErrors] = useState({});\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = event.target;\n    setInputs(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n  const validate = validationRules => {\n    const validationErrors = validationRules(inputs);\n    const isValid = !Object.values(validationErrors).some(error => error.trim() !== \"\");\n    setErrors(validationErrors);\n    return isValid;\n  };\n  const resetForm = () => {\n    setInputs(initialValues);\n    setErrors({});\n  };\n  return {\n    inputs,\n    errors,\n    handleChange,\n    validate,\n    resetForm\n  };\n};\n_s(FormManager, \"PmaWV1MGj4+9wZSRUC2L/QlP8nA=\");\n_c = FormManager;\nexport default FormManager;\nvar _c;\n$RefreshReg$(_c, \"FormManager\");","map":{"version":3,"names":["useState","FormManager","initialValues","_s","inputs","setInputs","errors","setErrors","handleChange","e","name","value","event","target","prev","validate","validationRules","validationErrors","isValid","Object","values","some","error","trim","resetForm","_c","$RefreshReg$"],"sources":["/Users/anitamavani/workspace/React/my-ts-app/src/pages/FormManager.tsx"],"sourcesContent":["import { useState } from 'react';\n\ntype ValidationFunction<T> = (values: T) => Record<keyof T, string>;\n\nconst FormManager = <T extends Record<string, any>>(initialValues: T) => {\n  const [inputs, setInputs] = useState<T>(initialValues);\n  const [errors, setErrors] = useState<Partial<Record<keyof T, string>>>({});\n\n  const handleChange = (\n    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\n  ) => {\n    const { name, value } = event.target;\n    setInputs((prev) => ({\n      ...prev,\n      [name]: value,\n    }));\n  };\n\n  const validate = (validationRules: ValidationFunction<T>): boolean => {\n    const validationErrors = validationRules(inputs);\n    const isValid = !Object.values(validationErrors).some((error) => error.trim() !== \"\");\n    setErrors(validationErrors); \n    return isValid;\n};\nconst resetForm = () => {\n    setInputs(initialValues);\n    setErrors({});\n}\n\n\n  return { inputs, errors, handleChange, validate, resetForm };\n};\n\nexport default FormManager;\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAIhC,MAAMC,WAAW,GAAmCC,aAAgB,IAAK;EAAAC,EAAA;EACvE,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGL,QAAQ,CAAIE,aAAa,CAAC;EACtD,MAAM,CAACI,MAAM,EAAEC,SAAS,CAAC,GAAGP,QAAQ,CAAmC,CAAC,CAAC,CAAC;EAE1E,MAAMQ,YAAY,GAChBC,CAA4D,IACzD;IACH,MAAM;MAAEC,IAAI;MAAEC;IAAM,CAAC,GAAGC,KAAK,CAACC,MAAM;IACpCR,SAAS,CAAES,IAAI,KAAM;MACnB,GAAGA,IAAI;MACP,CAACJ,IAAI,GAAGC;IACV,CAAC,CAAC,CAAC;EACL,CAAC;EAED,MAAMI,QAAQ,GAAIC,eAAsC,IAAc;IACpE,MAAMC,gBAAgB,GAAGD,eAAe,CAACZ,MAAM,CAAC;IAChD,MAAMc,OAAO,GAAG,CAACC,MAAM,CAACC,MAAM,CAACH,gBAAgB,CAAC,CAACI,IAAI,CAAEC,KAAK,IAAKA,KAAK,CAACC,IAAI,CAAC,CAAC,KAAK,EAAE,CAAC;IACrFhB,SAAS,CAACU,gBAAgB,CAAC;IAC3B,OAAOC,OAAO;EAClB,CAAC;EACD,MAAMM,SAAS,GAAGA,CAAA,KAAM;IACpBnB,SAAS,CAACH,aAAa,CAAC;IACxBK,SAAS,CAAC,CAAC,CAAC,CAAC;EACjB,CAAC;EAGC,OAAO;IAAEH,MAAM;IAAEE,MAAM;IAAEE,YAAY;IAAEO,QAAQ;IAAES;EAAU,CAAC;AAC9D,CAAC;AAACrB,EAAA,CA3BIF,WAAW;AAAAwB,EAAA,GAAXxB,WAAW;AA6BjB,eAAeA,WAAW;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}