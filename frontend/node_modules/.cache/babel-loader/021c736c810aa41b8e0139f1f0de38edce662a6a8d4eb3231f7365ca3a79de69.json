{"ast":null,"code":"const fieldValidationRules = {\n  name: {\n    required: true\n  },\n  email: {\n    required: true,\n    regex: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\n  },\n  password: {\n    required: true,\n    minLength: 6\n  },\n  message: {\n    required: true,\n    minLength: 10\n  }\n};\nconst Validation = inputs => {\n  const errors = {};\n  if (!inputs.name) {\n    errors.name = \"Name is required.\";\n  }\n  if (!inputs.email) {\n    errors.email = \"Email is required.\";\n  } else if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(inputs.email)) {\n    errors.email = \"Invalid email address.\";\n  }\n  if (!inputs.password) {\n    errors.name = \"Password is required.\";\n  }\n  if (!inputs.message) {\n    errors.message = \"Message is required.\";\n  } else if (inputs.message.length < 10) {\n    errors.message = \"Message must be at least 10 characters long.\";\n  }\n  return errors;\n};\n_c = Validation;\nexport default Validation;\nvar _c;\n$RefreshReg$(_c, \"Validation\");","map":{"version":3,"names":["fieldValidationRules","name","required","email","regex","password","minLength","message","Validation","inputs","errors","test","length","_c","$RefreshReg$"],"sources":["/Users/anitamavani/workspace/React/my-ts-app/src/pages/Validation.tsx"],"sourcesContent":["type ValidationFunction<T> = (inputs: T) => Record<keyof T, string>;\n\ninterface ValidationRule {\n  required?: boolean;\n  minLength?: number;\n  regex?: RegExp;\n  customValidation?: (value: string) => string | undefined;\n}\n\nconst fieldValidationRules: Record<string, ValidationRule> = {\n  name: { required: true },\n  email: { required: true, regex: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/ },\n  password: { required: true, minLength: 6 },\n  message: { required: true, minLength: 10 },\n};\n\nconst Validation: ValidationFunction<{ [key: string]: string }> = (inputs) => {\n\n  const errors: { [key: string]: string } = {};\n\n\n  if (!inputs.name) {\n    errors.name = \"Name is required.\";\n  }\n\n  if (!inputs.email) {\n    errors.email = \"Email is required.\";\n  } else if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(inputs.email)) {\n    errors.email = \"Invalid email address.\";\n  }\n\n  if (!inputs.password) {\n    errors.name = \"Password is required.\";\n  }\n\n  if (!inputs.message) {\n    errors.message = \"Message is required.\";\n  } else if (inputs.message.length < 10) {\n    errors.message = \"Message must be at least 10 characters long.\";\n  }\n\n  return errors;\n};\n\nexport default Validation;\n"],"mappings":"AASA,MAAMA,oBAAoD,GAAG;EAC3DC,IAAI,EAAE;IAAEC,QAAQ,EAAE;EAAK,CAAC;EACxBC,KAAK,EAAE;IAAED,QAAQ,EAAE,IAAI;IAAEE,KAAK,EAAE;EAA6B,CAAC;EAC9DC,QAAQ,EAAE;IAAEH,QAAQ,EAAE,IAAI;IAAEI,SAAS,EAAE;EAAE,CAAC;EAC1CC,OAAO,EAAE;IAAEL,QAAQ,EAAE,IAAI;IAAEI,SAAS,EAAE;EAAG;AAC3C,CAAC;AAED,MAAME,UAAyD,GAAIC,MAAM,IAAK;EAE5E,MAAMC,MAAiC,GAAG,CAAC,CAAC;EAG5C,IAAI,CAACD,MAAM,CAACR,IAAI,EAAE;IAChBS,MAAM,CAACT,IAAI,GAAG,mBAAmB;EACnC;EAEA,IAAI,CAACQ,MAAM,CAACN,KAAK,EAAE;IACjBO,MAAM,CAACP,KAAK,GAAG,oBAAoB;EACrC,CAAC,MAAM,IAAI,CAAC,4BAA4B,CAACQ,IAAI,CAACF,MAAM,CAACN,KAAK,CAAC,EAAE;IAC3DO,MAAM,CAACP,KAAK,GAAG,wBAAwB;EACzC;EAEA,IAAI,CAACM,MAAM,CAACJ,QAAQ,EAAE;IACpBK,MAAM,CAACT,IAAI,GAAG,uBAAuB;EACvC;EAEA,IAAI,CAACQ,MAAM,CAACF,OAAO,EAAE;IACnBG,MAAM,CAACH,OAAO,GAAG,sBAAsB;EACzC,CAAC,MAAM,IAAIE,MAAM,CAACF,OAAO,CAACK,MAAM,GAAG,EAAE,EAAE;IACrCF,MAAM,CAACH,OAAO,GAAG,8CAA8C;EACjE;EAEA,OAAOG,MAAM;AACf,CAAC;AAACG,EAAA,GA1BIL,UAAyD;AA4B/D,eAAeA,UAAU;AAAC,IAAAK,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}