{"ast":null,"code":"const fieldValidationRules = {\n  name: {\n    required: true\n  },\n  email: {\n    required: true,\n    regex: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\n  },\n  password: {\n    required: true,\n    minLength: 6\n  },\n  message: {\n    required: true,\n    minLength: 10\n  }\n};\nconst Validation = inputs => {\n  const errors = {};\n  for (const key in inputs) {\n    if (inputs.hasOwnProperty(key)) {\n      const value = inputs[key];\n      const rules = fieldValidationRules[key];\n      if (rules) {\n        // Check for required field\n        if (rules.required && !value) {\n          errors[key] = `${key.charAt(0).toUpperCase() + key.slice(1)} is required.`;\n        }\n\n        // const errors: { [ke// Check for minimum length\n        if (rules.minLength && value.length < rules.minLength) {\n          errors[key] = `${key.charAt(0).toUpperCase() + key.slice(1)} must be at least ${rules.minLength} characters long.`;\n        }\n\n        // Check for regex match (for fields like email)\n        if (rules.regex && !rules.regex.test(value)) {\n          errors[key] = `Invalid ${key.charAt(0).toUpperCase() + key.slice(1)}.`;\n        }\n\n        // Custom validation\n        if (rules.customValidation) {\n          const customError = rules.customValidation(value);\n          if (customError) {\n            errors[key] = customError;\n          }\n        }\n      }\n    }\n  }\n  return errors;\n};\n_c = Validation;\nexport default Validation;\nvar _c;\n$RefreshReg$(_c, \"Validation\");","map":{"version":3,"names":["fieldValidationRules","name","required","email","regex","password","minLength","message","Validation","inputs","errors","key","hasOwnProperty","value","rules","charAt","toUpperCase","slice","length","test","customValidation","customError","_c","$RefreshReg$"],"sources":["/Users/anitamavani/workspace/React/my-ts-app/src/pages/Validation.tsx"],"sourcesContent":["type ValidationFunction<T> = (inputs: T) => Record<keyof T, string>;\n\ninterface ValidationRule {\n  required?: boolean;\n  minLength?: number;\n  regex?: RegExp;\n  customValidation?: (value: string) => string | undefined;\n}\n\nconst fieldValidationRules: Record<string, ValidationRule> = {\n  name: { required: true },\n  email: { required: true, regex: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/ },\n  password: { required: true, minLength: 6 },\n  message: { required: true, minLength: 10 },\n};\n\nconst Validation: ValidationFunction<{ [key: string]: string }> = (inputs) => {\n  const errors: { [key: string]: string } = {};\n\n  for (const key in inputs) {\n    if (inputs.hasOwnProperty(key)) {\n      const value = inputs[key];\n      const rules = fieldValidationRules[key];\n\n      if (rules) {\n        // Check for required field\n        if (rules.required && !value) {\n          errors[key] = `${key.charAt(0).toUpperCase() + key.slice(1)} is required.`;\n        }\n  \n  // const errors: { [ke// Check for minimum length\n        if (rules.minLength && value.length < rules.minLength) {\n          errors[key] = `${key.charAt(0).toUpperCase() + key.slice(1)} must be at least ${rules.minLength} characters long.`;\n        }\n\n        // Check for regex match (for fields like email)\n        if (rules.regex && !rules.regex.test(value)) {\n          errors[key] = `Invalid ${key.charAt(0).toUpperCase() + key.slice(1)}.`;\n        }\n\n        // Custom validation\n        if (rules.customValidation) {\n          const customError = rules.customValidation(value);\n          if (customError) {\n            errors[key] = customError;\n          }\n        }\n      }\n    }\n  }\n\n  return errors;\n};\n\nexport default Validation;\n"],"mappings":"AASA,MAAMA,oBAAoD,GAAG;EAC3DC,IAAI,EAAE;IAAEC,QAAQ,EAAE;EAAK,CAAC;EACxBC,KAAK,EAAE;IAAED,QAAQ,EAAE,IAAI;IAAEE,KAAK,EAAE;EAA6B,CAAC;EAC9DC,QAAQ,EAAE;IAAEH,QAAQ,EAAE,IAAI;IAAEI,SAAS,EAAE;EAAE,CAAC;EAC1CC,OAAO,EAAE;IAAEL,QAAQ,EAAE,IAAI;IAAEI,SAAS,EAAE;EAAG;AAC3C,CAAC;AAED,MAAME,UAAyD,GAAIC,MAAM,IAAK;EAC5E,MAAMC,MAAiC,GAAG,CAAC,CAAC;EAE5C,KAAK,MAAMC,GAAG,IAAIF,MAAM,EAAE;IACxB,IAAIA,MAAM,CAACG,cAAc,CAACD,GAAG,CAAC,EAAE;MAC9B,MAAME,KAAK,GAAGJ,MAAM,CAACE,GAAG,CAAC;MACzB,MAAMG,KAAK,GAAGd,oBAAoB,CAACW,GAAG,CAAC;MAEvC,IAAIG,KAAK,EAAE;QACT;QACA,IAAIA,KAAK,CAACZ,QAAQ,IAAI,CAACW,KAAK,EAAE;UAC5BH,MAAM,CAACC,GAAG,CAAC,GAAG,GAAGA,GAAG,CAACI,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,GAAGL,GAAG,CAACM,KAAK,CAAC,CAAC,CAAC,eAAe;QAC5E;;QAEN;QACM,IAAIH,KAAK,CAACR,SAAS,IAAIO,KAAK,CAACK,MAAM,GAAGJ,KAAK,CAACR,SAAS,EAAE;UACrDI,MAAM,CAACC,GAAG,CAAC,GAAG,GAAGA,GAAG,CAACI,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,GAAGL,GAAG,CAACM,KAAK,CAAC,CAAC,CAAC,qBAAqBH,KAAK,CAACR,SAAS,mBAAmB;QACpH;;QAEA;QACA,IAAIQ,KAAK,CAACV,KAAK,IAAI,CAACU,KAAK,CAACV,KAAK,CAACe,IAAI,CAACN,KAAK,CAAC,EAAE;UAC3CH,MAAM,CAACC,GAAG,CAAC,GAAG,WAAWA,GAAG,CAACI,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,GAAGL,GAAG,CAACM,KAAK,CAAC,CAAC,CAAC,GAAG;QACxE;;QAEA;QACA,IAAIH,KAAK,CAACM,gBAAgB,EAAE;UAC1B,MAAMC,WAAW,GAAGP,KAAK,CAACM,gBAAgB,CAACP,KAAK,CAAC;UACjD,IAAIQ,WAAW,EAAE;YACfX,MAAM,CAACC,GAAG,CAAC,GAAGU,WAAW;UAC3B;QACF;MACF;IACF;EACF;EAEA,OAAOX,MAAM;AACf,CAAC;AAACY,EAAA,GApCId,UAAyD;AAsC/D,eAAeA,UAAU;AAAC,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}